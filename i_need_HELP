from dataclasses import dataclass


@dataclass
class InfoMessage:
    """Информационное сообщение о тренировке."""

    training_type: str
    duration: float
    distance: float
    speed: float
    calories: float

    def get_message(self) -> str:
        return (f'Тип тренировки: {self.training_type}; '
                f'Длительность: {self.duration:.3f} ч.; '
                f'Дистанция: {self.distance:.3f} км; '
                f'Ср. скорость: {self.speed:.3f} км/ч; '
                f'Потрачено ккал: {self.calories:.3f}.')


@dataclass
class Training:
    """Базовый класс тренировки."""
    action: int
    duration: float
    weight: float

    LEN_STEP: int = 0.65
    M_IN_KM: int = 1000
    MIN_IN_H: int = 60

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 ) -> None:
        self.action = action
        self.duration = duration
        self.weight = weight

    def get_distance(self) -> float:
        """Получить дистанцию в км."""
        return self.action * self.LEN_STEP / self.M_IN_KM

    def get_mean_speed(self) -> float:
        """Получить среднюю скорость движения."""
        return self.get_distance() / self.duration

    def get_spent_calories(self) -> float:
        """Получить количество затраченных калорий."""
        pass

    def get_training_type(self) -> str:
        """Получить тип тренировки."""
        pass

    def show_training_info(self) -> InfoMessage:
        """Вернуть информационное сообщение о выполненной тренировке."""
        info_object = InfoMessage(self.get_training_type(), self.duration,
                                  self.get_distance(), self.get_mean_speed(),
                                  self.get_spent_calories())
        return info_object


@dataclass
class Running(Training):
    """Тренировка: бег."""

    CALORIES_MEAN_SPEED_MULTIPLIER: int = 18
    CALORIES_MEAN_SPEED_SHIFT: float = 1.79

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float
                 ) -> None:
        super().__init__(action,
                         duration,
                         weight)

    def get_spent_calories(self) -> float:
        return (
            (self.CALORIES_MEAN_SPEED_MULTIPLIER
             * self.get_mean_speed()
             + self.CALORIES_MEAN_SPEED_SHIFT)
            * self.weight / self.M_IN_KM
            * (self.duration * self.MIN_IN_H)
        )

    def get_training_type(self) -> str:
        """Получить тип тренировки."""
        return 'Running'


@dataclass
class SportsWalking(Training):
    """Тренировка: спортивная ходьба."""

    PARAM_FOR_FORMULA_1: float = 0.035
    PARAM_FOR_FORMULA_2: float = 0.029
    KM_IN_M: float = 0.278
    H_IN_SM: int = 100

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 height: int
                 ) -> None:
        super().__init__(action,
                         duration,
                         weight)
        self.height = height

    def get_spent_calories(self) -> float:
        return (
            (self.PARAM_FOR_FORMULA_1 * self.weight
             + ((self.get_mean_speed() * self.KM_IN_M)**2
                / (self.height / self.H_IN_SM))
             * self.PARAM_FOR_FORMULA_1 * self.weight)
            * (self.duration * self.MIN_IN_H)
        )

    def get_training_type(self) -> str:
        """Получить тип тренировки."""
        return 'SportsWalking'


@dataclass
class Swimming(Training):
    """Тренировка: плавание."""

    LEN_STEP: float = 1.38
    PARAM_FOR_FORMULA_1: float = 1.1
    PARAM_FOR_FORMULA_2: float = 2

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 length_pool: int,
                 count_pool: int,
                 ) -> None:
        super().__init__(action,
                         duration,
                         weight)
        self.length_pool = length_pool
        self.count_pool = count_pool

    def get_mean_speed(self) -> float:
        return (self.length_pool * self.count_pool
                / self.M_IN_KM / self.duration)

    def get_spent_calories(self) -> float:
        return (
            (self.get_mean_speed() + self.PARAM_FOR_FORMULA_1)
            * self.PARAM_FOR_FORMULA_2
            * self.weight * self.duration
        )

    def get_training_type(self) -> str:
        """Получить тип тренировки."""
        return 'Swimming'


def read_package(workout_type: str, data: list) -> Training:
    """Прочитать данные полученные от датчиков."""
    pack_dict = {
        'SWM': Swimming,
        'RUN': Running,
        'WLK': SportsWalking
    }
    training_class = pack_dict.get(workout_type)
    if not training_class:
        raise SystemExit
    return training_class(*data)


def main(training: Training) -> None:
    """Главная функция."""
    info: InfoMessage = training.show_training_info()
    print(info.get_message())


if __name__ == '__main__':
    packages = [
        ('SWM', [720, 1, 80, 25, 40]),
        ('RUN', [15000, 1, 75]),
        ('WLK', [9000, 1, 75, 180]),
    ]

    for workout_type, data in packages:
        training = read_package(workout_type, data)
        main(training)
